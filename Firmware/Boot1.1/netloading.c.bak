#include "w3150a.h"
#include "socket.h"
#include "netloading.h"
#include "delay.h"
#include "config.h"
#include "flash.h"
//#include "serial.h"
/*
char D2C(uchar c)
{
	uint t = c;

	if (t >= 0 && t <= 9)
		return '0' + c;
	if (t >= 10 && t <= 15)
		return 'A' + c - 10;

	return (char)c;
}
*/
static void FlashPage(uint page, void *data, uint len)
{
	uint i;
	uint *wp = data;
	
	if(len > 256) len = 256;
	
	if(page >= 256) 
	{
		if(page >= 480)
			return;
		RAMPZ = 1;
	}
	else RAMPZ = 0;

	page <<= 8;
	
	SpmCommand(page, (1 << PGERS) | (1 << SPMEN));
	SpmCommand(0, (1 << RWWSRE) | (1 << SPMEN));
	
	for(i = 0; i < len; i += 2, wp++)
		SpmBufferFill(i, *wp);

	for(; i < 256; i += 2)
		SpmBufferFill(i, 0xFFFF);
	
	SpmCommand(page, (1 << PGWRT) | (1 << SPMEN)); 
	SpmCommand(0, (1 << RWWSRE) | (1 << SPMEN));               
}

int loading(void) 
{
	uint size_recv, i, j, pos_flash_buf;
	uchar state, check[2];
	ulong size_total;
	uint time_out, size_recvpp, page;
	uchar flag;
	uchar * pflash_buf;
	uchar * pSOCK_BUF;
	uchar * pFLASH_BUF;
//	uchar * pTEMP_BUF;

	socket(SOCK_CONFIG, SOCK_STREAM, REMOTE_UPDATE_PORT, 0);
	listen(SOCK_CONFIG);

	time_out = 0;
	while(1) {
		state = select(SOCK_CONFIG, SEL_CONTROL);				
		if (state == SOCK_ESTABLISHED)
		{
			size_total = 0;
			size_recvpp = 0;
			check[0] = check[1] = 0;
			pos_flash_buf = 0;
			page = 0;
			flag = 0;
			pflash_buf = (uchar*)FLASH_BUF;
			pFLASH_BUF = (uchar*)FLASH_BUF;
			pSOCK_BUF = (uchar*)TEMP_BUF;
			break;
		}
		time_out++;
		wait_10ms(1);
		if (time_out > 200) return(0);
	}
	while (1) {
		state = select(SOCK_CONFIG, SEL_CONTROL);
		if (state == SOCK_ESTABLISHED) {
			if (flag == 0) {
				if (select(SOCK_CONFIG, SEL_RECV) >= 4) {
					recv(SOCK_CONFIG, (uchar *)&size_total, 4);		// not in file
					flag = 1;
				}
			} 
			else {
				if ((size_recv = select(SOCK_CONFIG, SEL_RECV)) > 0) {
					size_recv = recv(SOCK_CONFIG, (uchar*)TEMP_BUF, size_recv);
					size_recvpp += size_recv;

					// Write flash

					// copy sock_buff to flash_buf
					for(i=0; i < size_recv; i++) {
						*(pFLASH_BUF+pos_flash_buf+i) = *(pSOCK_BUF+i);
					}
					// calc total size
					j = pos_flash_buf + size_recv;
					while(1) {
						if(j >= 256) {
							FlashPage(page++, (void *)pflash_buf, 256);

							pflash_buf += 256;
							j -= 256;
							if(j == 0) {
								pflash_buf = pFLASH_BUF;
								pos_flash_buf = 0;
								break;	// no remained data
							}
						}
						else {					// exist remained data
							// copy remained data to flash_buf[0]~
							for(i = 0; i < j; i++) {
								*(pSOCK_BUF+i) = *pflash_buf;
								pflash_buf++;
							}
							for(i = 0; i < j; i++)
								*(pFLASH_BUF+i) = *(pSOCK_BUF+i);
							pos_flash_buf = j;	// remained data size
							// if it's the last remained data, then
							if(size_recvpp == size_total) {
								FlashPage(page, (void *)pFLASH_BUF, pos_flash_buf);
							}
							break;
						}
					}

					// compare checksum and return
					if(size_recvpp == size_total) {			// finished recv.

						disconnect(SOCK_CONFIG);
						break;								// return 1;
					}
				}
			}
		}
	} // while
	return 1;
}
